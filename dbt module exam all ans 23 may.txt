create table dept
(DEPTNO int,
DNAME varchar(15),
LOC varchar(10)
);
drop table dept;
desc dept;
insert into dept values 
(10,'ACCOUNTING','NEW YORK'),
(20, 'RESEARCH', 'DALLAS'),
(30 ,'SALES' ,'CHICAGO'),
(40 ,'OPERATIONS','BOSTON');
select * from dept;
/* table no 2 */
create table EMP
(EMPNO int,
ENAME varchar(10),
JOB varchar(9),
HIREDATE date,
SAL float,
COMM float,
DEPTNO int);
desc EMP;
drop table EMP;

insert into EMP values
(7839,'KING', 'MANAGER' ,'1991-11-17', 5000, NULL, 10),
(7698 ,'BLAKE', 'CLERK', '1981-05-01' ,2850, NULL, 30),
(7782 ,'CLARK' ,'MANAGER', '1981-06-09 ',2450, NULL ,10),
(7566 ,'JONES' ,'CLERK' ,'1981-04-02' ,2975 ,NULL ,20),
(7654 ,'MARTIN', 'SALESMAN','1981-09-28', 1250, 1400, 30),
(7499 ,'ALLEN', 'SALESMAN', '1981-02-20', 1600, 300, 30);
select *from EMP;

/*3. Display all the employees where SAL between 2500 and 5000 (inclusive of both).*/
select * from emp
where SAL between 2500 and 5000;

/*4. Display all the ENAMEs in descending order of ENAME.*/
select ENAME, Ename of EMP
order by ENAME desc; 

/*5. Display all the JOBs in lowercase.*/
select LOWER(JOB) from EMP; 

/*6. Display the ENAMEs and the lengths of the ENAMEs.*/
select length (ENAME) from EMP;

/*7. Display the DEPTNO and the count of employees who belong to that DEPTNO .*/
select DEPTNO, count(*) from EMP group by DEPTNO;

/*8. Display the DNAMEs and the ENAMEs who belong to that DNAME.*/
select DNAME,ENAME from dept,EMP where EMP.deptno= dept.deptno;

/*9. Display the position at which the string ‘AR’ occurs in the ename.*/
select ename from EMP where ename like '%AR%';

/*10. Display the HRA for each employee given that HRA is 20% of SAL.*/
 select sal, sal*0.20,'HRA'from EMP;
 
 /*que 1 Write a stored procedure by the name of PROC1 that accepts two varchar strings
as parameters. Your procedure should then determine if the first varchar string 
exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 = 
‘CDAC, then string1 exists inside string2. The stored procedure should insert the 
appropriate message into a suitable TEMPP output table. Calling program for the 
stored procedure need not be written.*/

 create table tempp(
string1 varchar(100),
string2 varchar(100),
msg varchar(100)
);
drop table tempp;
delimiter //
create procedure PROC1 (string1 varchar(100),string2 varchar(100))

begin 
declare msg varchar(100);
declare num int;
select LOCATE(string1,string2)into num;
if num>0 then
 insert into tempp values (string1,string2,'String1 exists in String2');
else 
insert into tempp values (string1,string2,'String1 does not exists in String2');
end if
select *from tempp;
end; //
delimiter ;
call PROC1('DAC','CDAC');
call PROC1('DAC','MUMBAI'); 
call PROC1 ('RAM','SHYAM');
Select FIR "POSITION', SEC "REMARK "FROM TEMPP";


/*2. Create a stored function by the name of FUNC1 to take three parameters, the 
sides of a triangle. The function should return a Boolean value:- TRUE if the 
triangle is valid, FALSE otherwise. A triangle is valid if the length of each side is 
less than the sum of the lengths of the other two sides. Check if the dimensions 
entered can form a valid triangle. Calling program for the stored function need not 
be written*/


delimiter //
create function FUN1 (s1 int,s2 int,s3 int)
returns boolean
deterministic 

begin
    if s1<(s2+s3) and s2<(s1+s3) and s3<(s1+s2) then
          return true; 
    else 
          return false; 
end if;
end; //
delimiter ;
 create table triang
(
s1 int,
s2 int,
s3 int,
Remark varchar (25)
);
DROP TABLE triang;
delimiter //
create procedure tri (a int, b int, c int)
begin 
      if FUNC1(a,b,c) then
          insert into triang values (a,b,c,'valid triangle');
     else
          insert into triang values (a,b,c,'Invalid triangle');
end if;
end; //
delimiter ;
drop procedure tri;

 
call tri(10,20,30);
call tri(30,20,30);

select *from triang;